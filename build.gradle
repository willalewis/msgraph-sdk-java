/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:20.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    compile 'com.google.code.gson:gson:2.8.2'
    
    // compile 'org.glassfish.jersey.core:jersey-server:2.26'
    compile 'com.sun.jersey:jersey-server:1.19.4'
}

def pomConfig = {
    licenses {
        license([:]) {
            name "MIT License"
            url "http://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }
}

publishing {

    publications {

        maven(MavenPublication) {

            groupId 'com.microsoft.graph'

            artifactId 'microsoft-graph'

            version '${mavenMajorVersion}.${mavenMinorVersion}-SNAPSHOT'

            from components.java

            artifact sourceJar
            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Preview Microsoft Graph SDK for Java')
                root.appendNode('url', 'https://github.com/microsoftgraph/msgraph-sdk-java')
                root.children().last() + pomConfig
            }

        }

    }

}

task sourceJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allJava
}

compileJava {
  sourceCompatibility = 1.7
  targetCompatibility = 1.7
}

def getVersionCode() {
    return mavenMajorVersion.toInteger() * 10000 + mavenMinorVersion.toInteger() * 100 + mavenPatchVersion.toInteger()
}

def getVersionName() {
    return "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}"
}

uploadArchives {

    def bintrayUsername = ""

    def bintrayApikey = ""

    if (project.rootProject.file('local.properties').exists()) {

        Properties properties = new Properties()

        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        bintrayUsername = properties.getProperty('bintray.user')

        bintrayApikey = properties.getProperty('bintray.apikey')

    }

    configuration = configurations.archives

    repositories.mavenDeployer {

        pom {

           setGroupId project.mavenGroupId

           setArtifactId project.mavenArtifactId

           setVersion getVersionName()

        }

        repository (url: project.mavenRepoUrl) {

            authentication(

                 // put these values in local file ~/.gradle/gradle.properties

                 userName: project.hasProperty("bintrayUsername") ? project.bintrayUsername : bintrayUsername,

                 password: project.hasProperty("bintrayApikey") ? project.bintrayApikey : bintrayApikey

            )

        }

    }

}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}
